HTTP由响应报文和请求报文组成
请求报文和响应报文都是由以下4部分组成

1.请求行
	格式为：
	Method Request-URI HTTP-Version 结尾符
	结尾符一般用\r\n
2.请求头
	通用报头:
	既可以出现在请求报头，也可以出现在响应报头中
	Date：表示消息产生的日期和时间
	Connection：允许发送指定连接的选项，例如指定连接是连续的，或者指	定“close”选项，通知服务器，在响应完成后，关闭连接
	Cache-Control：用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令	在请求中未必会出现），且是独立的（一个消息的缓存指令不会影响另一个消息处	理的缓存机制）
	
	请求报头:
	请求报头通知服务器关于客户端求求的信息，典型的请求头有：
	Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机
	User-Agent：发送请求的浏览器类型、操作系统等信息
	Accept：客户端可识别的内容类型列表，用于指定客户端接收那些类型的信息
	Accept-Encoding：客户端可识别的数据编码
	Accept-Language：表示浏览器所支持的语言类型
	Connection：允许客户端和服务器指定与请求/响应连接有关的选项，例如这是为			Keep-Alive则表示保持连接。
	Transfer-Encoding：告知接收端为了保证报文的可靠传输，对报文采用了什么编	码方式。

响应报头:

用于服务器传递自身信息的响应，常见的响应报头：

Location：用于重定向接受者到一个新的位置，常用在更换域名的时候

Server：包含可服务器用来处理请求的系统信息，与User-Agent请求报头是相对应的

 

实体报头:

实体报头用来定于被传送资源的信息，既可以用于请求也可用于响应。请求和响应消息都可以传送一个实体，常见的实体报头为：

Content-Type：发送给接收者的实体正文的媒体类型

Content-Lenght：实体正文的长度

Content-Language：描述资源所用的自然语言，没有设置则该选项则认为实体内容将提供给所有的语言阅读

Content-Encoding：实体报头被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。

Last-Modified：实体报头用于指示资源的最后修改日期和时间

Expires：实体报头给出响应过期的日期和时间
 
3.空行
http协议规定的格式，一般采用\r\n
4.消息主体:

一般用于http的post method。通过实体报头规定消息主体的格式内容、

例如 Content-Type=text/plain

该实体报头规定了消息主体的数据是纯文本格式

常见的还有

Content-Type=application/x-www-form-urlencoded，定义为Key=value格式

Content-Type=application/json，定义为序列化为的json字符串

Content-Type= multipart/form-data，定义为表单数据提交，该格式比较复杂，详细解释一下。

 

multipart/form-data

1. 该格式是post的常见提交方式，也就是说是由post方法来组合实现的

2. 使用该提交方法需要规定一个内容分割符用于分割请求体中的多个post的内容，如文件内容和文本内容自然需要分割开来，不然接收方就无法正常解析和还原这个文件了。具体的头信息如下：

Content-Type: multipart/form-data; boundary=${bound}  

其中${bound}是自定义的分隔符，一般情况用一长串不会和业务数据重复的字符串表示 ，例如9431149156168

3. 分割符前面需要加上--

4. 最后的分割符后面也需要加上―

5. 所有的数据请求头和数据之间都用\r\n\r\n分开，两个数据间用 --${bound}\r\n分开